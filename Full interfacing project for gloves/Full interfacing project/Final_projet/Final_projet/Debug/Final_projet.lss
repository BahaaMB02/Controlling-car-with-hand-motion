
Final_projet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000002fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000992  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000716  00000000  00000000  00000d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000546  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  000019e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040b  00000000  00000000  00001af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000261  00000000  00000000  00001eff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  74:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_Initilization>:
 */ 
#include "ADC.h"
#define ADC_DATA (*(volatile uint16_t*) 0x24)

void ADC_Initilization (void){
	sei(); //enable interrupt
  7c:	78 94       	sei
	
	ADCSRA |= 0b10111111;//0xA7
  7e:	86 b1       	in	r24, 0x06	; 6
  80:	8f 6b       	ori	r24, 0xBF	; 191
  82:	86 b9       	out	0x06, r24	; 6

	
	ADMUX |= 0b01000000;//0x40
  84:	87 b1       	in	r24, 0x07	; 7
  86:	80 64       	ori	r24, 0x40	; 64
  88:	87 b9       	out	0x07, r24	; 7
  8a:	08 95       	ret

0000008c <ADC_Read>:
}
uint8_t ADC_Read(void)
{
	uint8_t data = 0;
	data = ADC_DATA;
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	95 b1       	in	r25, 0x05	; 5
	
	return data;
  90:	08 95       	ret

00000092 <__vector_16>:
//converted value
volatile char adcValue1;
volatile char adcValue;	
	
ISR(ADC_vect)           //interrupt
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	adcValue = ADC_Read(); //getting the value
  b4:	0e 94 46 00 	call	0x8c	; 0x8c <ADC_Read>
  b8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <adcValue>
	/*PORTC = adcValue ;*/
	switch (ADMUX)	
  bc:	87 b1       	in	r24, 0x07	; 7
  be:	81 34       	cpi	r24, 0x41	; 65
  c0:	e1 f0       	breq	.+56     	; 0xfa <__vector_16+0x68>
  c2:	18 f4       	brcc	.+6      	; 0xca <__vector_16+0x38>
  c4:	80 34       	cpi	r24, 0x40	; 64
  c6:	31 f0       	breq	.+12     	; 0xd4 <__vector_16+0x42>
  c8:	54 c0       	rjmp	.+168    	; 0x172 <__vector_16+0xe0>
  ca:	82 34       	cpi	r24, 0x42	; 66
  cc:	49 f1       	breq	.+82     	; 0x120 <__vector_16+0x8e>
  ce:	83 34       	cpi	r24, 0x43	; 67
  d0:	f1 f1       	breq	.+124    	; 0x14e <__vector_16+0xbc>
  d2:	4f c0       	rjmp	.+158    	; 0x172 <__vector_16+0xe0>
	{
		case 0x40 :
		if (adcValue >= 100)
  d4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <adcValue>
  d8:	84 36       	cpi	r24, 0x64	; 100
  da:	60 f0       	brcs	.+24     	; 0xf4 <__vector_16+0x62>
		{
			UART_send_char('1');
  dc:	81 e3       	ldi	r24, 0x31	; 49
  de:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_send_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	81 ee       	ldi	r24, 0xE1	; 225
  e6:	94 e0       	ldi	r25, 0x04	; 4
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <__vector_16+0x56>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <__vector_16+0x60>
  f2:	00 00       	nop
			_delay_ms(100)    ;
			
		}
		ADMUX = 0x41 ;
  f4:	81 e4       	ldi	r24, 0x41	; 65
  f6:	87 b9       	out	0x07, r24	; 7
		break;
  f8:	3c c0       	rjmp	.+120    	; 0x172 <__vector_16+0xe0>
		case 0x41 :
		if (adcValue >= 100)
  fa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <adcValue>
  fe:	84 36       	cpi	r24, 0x64	; 100
 100:	60 f0       	brcs	.+24     	; 0x11a <__vector_16+0x88>
		{
			UART_send_char('2');
 102:	82 e3       	ldi	r24, 0x32	; 50
 104:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_send_char>
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	81 ee       	ldi	r24, 0xE1	; 225
 10c:	94 e0       	ldi	r25, 0x04	; 4
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <__vector_16+0x7c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <__vector_16+0x86>
 118:	00 00       	nop
			_delay_ms(100)    ;
			
		}
		ADMUX = 0x42 ;
 11a:	82 e4       	ldi	r24, 0x42	; 66
 11c:	87 b9       	out	0x07, r24	; 7
		break;
 11e:	29 c0       	rjmp	.+82     	; 0x172 <__vector_16+0xe0>
		case 0x42 :
		if (adcValue >= 100 && adcValue <= 200)
 120:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <adcValue>
 124:	84 36       	cpi	r24, 0x64	; 100
 126:	80 f0       	brcs	.+32     	; 0x148 <__vector_16+0xb6>
 128:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <adcValue>
 12c:	89 3c       	cpi	r24, 0xC9	; 201
 12e:	60 f4       	brcc	.+24     	; 0x148 <__vector_16+0xb6>
		{
			UART_send_char('3');
 130:	83 e3       	ldi	r24, 0x33	; 51
 132:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_send_char>
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	81 ee       	ldi	r24, 0xE1	; 225
 13a:	94 e0       	ldi	r25, 0x04	; 4
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <__vector_16+0xaa>
 144:	00 c0       	rjmp	.+0      	; 0x146 <__vector_16+0xb4>
 146:	00 00       	nop
			_delay_ms(100)    ;
			
		}
		ADMUX = 0x43 ;
 148:	83 e4       	ldi	r24, 0x43	; 67
 14a:	87 b9       	out	0x07, r24	; 7
		break;
 14c:	12 c0       	rjmp	.+36     	; 0x172 <__vector_16+0xe0>
		case 0x43 :
		if (adcValue >= 150)
 14e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <adcValue>
 152:	86 39       	cpi	r24, 0x96	; 150
 154:	60 f0       	brcs	.+24     	; 0x16e <__vector_16+0xdc>
		{
			UART_send_char('4');
 156:	84 e3       	ldi	r24, 0x34	; 52
 158:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_send_char>
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	81 ee       	ldi	r24, 0xE1	; 225
 160:	94 e0       	ldi	r25, 0x04	; 4
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <__vector_16+0xd0>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <__vector_16+0xda>
 16c:	00 00       	nop
			_delay_ms(100)    ;
			
		}
		ADMUX = 0x40 ;
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	87 b9       	out	0x07, r24	; 7
		break;
			
	}
	ADCSRA |= (1 << ADSC);
 172:	86 b1       	in	r24, 0x06	; 6
 174:	80 64       	ori	r24, 0x40	; 64
 176:	86 b9       	out	0x06, r24	; 6
		
}
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	bf 91       	pop	r27
 17e:	af 91       	pop	r26
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	7f 91       	pop	r23
 186:	6f 91       	pop	r22
 188:	5f 91       	pop	r21
 18a:	4f 91       	pop	r20
 18c:	3f 91       	pop	r19
 18e:	2f 91       	pop	r18
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <main>:

	
int main(void)
{	ADC_Initilization();
 19a:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_Initilization>
	Uart_Initilization(9600);
 19e:	80 e8       	ldi	r24, 0x80	; 128
 1a0:	95 e2       	ldi	r25, 0x25	; 37
 1a2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Uart_Initilization>
	ADCSRA |= (1 << ADSC);
 1a6:	86 b1       	in	r24, 0x06	; 6
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	86 b9       	out	0x06, r24	; 6
	DDRD = 0xFF ;
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x01 ;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0X00;
 1b4:	15 ba       	out	0x15, r1	; 21
	DDRC |= 0x02;
 1b6:	84 b3       	in	r24, 0x14	; 20
 1b8:	82 60       	ori	r24, 0x02	; 2
 1ba:	84 bb       	out	0x14, r24	; 20
	PORTC |=0x02;
 1bc:	85 b3       	in	r24, 0x15	; 21
 1be:	82 60       	ori	r24, 0x02	; 2
 1c0:	85 bb       	out	0x15, r24	; 21
	DDRA = 0 ;
 1c2:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0 ;
 1c4:	1b ba       	out	0x1b, r1	; 27
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <main+0x2c>

000001c8 <Uart_Initilization>:
uint8_t Uart_Recieve (void) {
	
	while (! (UCSRA & (1 << RXC)));
	return(UDR);
	
}
 1c8:	21 b3       	in	r18, 0x11	; 17
 1ca:	2e 7f       	andi	r18, 0xFE	; 254
 1cc:	21 bb       	out	0x11, r18	; 17
 1ce:	21 b3       	in	r18, 0x11	; 17
 1d0:	22 60       	ori	r18, 0x02	; 2
 1d2:	21 bb       	out	0x11, r18	; 17
 1d4:	2a b1       	in	r18, 0x0a	; 10
 1d6:	28 61       	ori	r18, 0x18	; 24
 1d8:	2a b9       	out	0x0a, r18	; 10
 1da:	20 b5       	in	r18, 0x20	; 32
 1dc:	26 68       	ori	r18, 0x86	; 134
 1de:	20 bd       	out	0x20, r18	; 32
 1e0:	9c 01       	movw	r18, r24
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	60 e4       	ldi	r22, 0x40	; 64
 1e8:	72 e4       	ldi	r23, 0x42	; 66
 1ea:	8f e0       	ldi	r24, 0x0F	; 15
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 02 01 	call	0x204	; 0x204 <__divmodsi4>
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	31 09       	sbc	r19, r1
 1f6:	29 b9       	out	0x09, r18	; 9
 1f8:	30 bd       	out	0x20, r19	; 32
 1fa:	08 95       	ret

000001fc <UART_send_char>:

void UART_send_char(char data)
{
	UDR = data;//Send data to UDR
 1fc:	8c b9       	out	0x0c, r24	; 12
	while(GET_BIT(UCSRA, TXC) != 1);//Wait until data transmitted, flag will raise
 1fe:	5e 9b       	sbis	0x0b, 6	; 11
 200:	fe cf       	rjmp	.-4      	; 0x1fe <UART_send_char+0x2>
	
}
 202:	08 95       	ret

00000204 <__divmodsi4>:
 204:	05 2e       	mov	r0, r21
 206:	97 fb       	bst	r25, 7
 208:	1e f4       	brtc	.+6      	; 0x210 <__divmodsi4+0xc>
 20a:	00 94       	com	r0
 20c:	0e 94 19 01 	call	0x232	; 0x232 <__negsi2>
 210:	57 fd       	sbrc	r21, 7
 212:	07 d0       	rcall	.+14     	; 0x222 <__divmodsi4_neg2>
 214:	0e 94 21 01 	call	0x242	; 0x242 <__udivmodsi4>
 218:	07 fc       	sbrc	r0, 7
 21a:	03 d0       	rcall	.+6      	; 0x222 <__divmodsi4_neg2>
 21c:	4e f4       	brtc	.+18     	; 0x230 <__divmodsi4_exit>
 21e:	0c 94 19 01 	jmp	0x232	; 0x232 <__negsi2>

00000222 <__divmodsi4_neg2>:
 222:	50 95       	com	r21
 224:	40 95       	com	r20
 226:	30 95       	com	r19
 228:	21 95       	neg	r18
 22a:	3f 4f       	sbci	r19, 0xFF	; 255
 22c:	4f 4f       	sbci	r20, 0xFF	; 255
 22e:	5f 4f       	sbci	r21, 0xFF	; 255

00000230 <__divmodsi4_exit>:
 230:	08 95       	ret

00000232 <__negsi2>:
 232:	90 95       	com	r25
 234:	80 95       	com	r24
 236:	70 95       	com	r23
 238:	61 95       	neg	r22
 23a:	7f 4f       	sbci	r23, 0xFF	; 255
 23c:	8f 4f       	sbci	r24, 0xFF	; 255
 23e:	9f 4f       	sbci	r25, 0xFF	; 255
 240:	08 95       	ret

00000242 <__udivmodsi4>:
 242:	a1 e2       	ldi	r26, 0x21	; 33
 244:	1a 2e       	mov	r1, r26
 246:	aa 1b       	sub	r26, r26
 248:	bb 1b       	sub	r27, r27
 24a:	fd 01       	movw	r30, r26
 24c:	0d c0       	rjmp	.+26     	; 0x268 <__udivmodsi4_ep>

0000024e <__udivmodsi4_loop>:
 24e:	aa 1f       	adc	r26, r26
 250:	bb 1f       	adc	r27, r27
 252:	ee 1f       	adc	r30, r30
 254:	ff 1f       	adc	r31, r31
 256:	a2 17       	cp	r26, r18
 258:	b3 07       	cpc	r27, r19
 25a:	e4 07       	cpc	r30, r20
 25c:	f5 07       	cpc	r31, r21
 25e:	20 f0       	brcs	.+8      	; 0x268 <__udivmodsi4_ep>
 260:	a2 1b       	sub	r26, r18
 262:	b3 0b       	sbc	r27, r19
 264:	e4 0b       	sbc	r30, r20
 266:	f5 0b       	sbc	r31, r21

00000268 <__udivmodsi4_ep>:
 268:	66 1f       	adc	r22, r22
 26a:	77 1f       	adc	r23, r23
 26c:	88 1f       	adc	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	1a 94       	dec	r1
 272:	69 f7       	brne	.-38     	; 0x24e <__udivmodsi4_loop>
 274:	60 95       	com	r22
 276:	70 95       	com	r23
 278:	80 95       	com	r24
 27a:	90 95       	com	r25
 27c:	9b 01       	movw	r18, r22
 27e:	ac 01       	movw	r20, r24
 280:	bd 01       	movw	r22, r26
 282:	cf 01       	movw	r24, r30
 284:	08 95       	ret

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
