
Final_projet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000276  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000002ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000094f  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006eb  00000000  00000000  00000d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e5  00000000  00000000  0000141a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001900  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e1  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001e74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

	volatile uint8_t data;
	
int main(void)
{
	Uart_Initilization(9600);
  7c:	80 e8       	ldi	r24, 0x80	; 128
  7e:	95 e2       	ldi	r25, 0x25	; 37
  80:	0e 94 da 00 	call	0x1b4	; 0x1b4 <Uart_Initilization>
	DcMotor_Initialization();
  84:	0e 94 83 00 	call	0x106	; 0x106 <DcMotor_Initialization>
	
	DDRD = 0xFF ;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xff ;
  8c:	84 bb       	out	0x14, r24	; 20
			
			DDRB |= (1<<3);
  8e:	87 b3       	in	r24, 0x17	; 23
  90:	88 60       	ori	r24, 0x08	; 8
  92:	87 bb       	out	0x17, r24	; 23
			DDRB |= (1<<4);
  94:	87 b3       	in	r24, 0x17	; 23
  96:	80 61       	ori	r24, 0x10	; 16
  98:	87 bb       	out	0x17, r24	; 23
	
while(1)
{
	data = Uart_Recieve();
  9a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Uart_Recieve>
  9e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	if (data==1)
  a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	41 f4       	brne	.+16     	; 0xba <main+0x3e>
	{
		DCMotor_Rotate(Motor_0,Motor_CW);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 96 00 	call	0x12c	; 0x12c <DCMotor_Rotate>
		DcMotor_Brake(Motor_0);
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 c7 00 	call	0x18e	; 0x18e <DcMotor_Brake>
  b8:	f0 cf       	rjmp	.-32     	; 0x9a <main+0x1e>
	}
	else if (data==2)
  ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	41 f4       	brne	.+16     	; 0xd2 <main+0x56>
	{
		DCMotor_Rotate(Motor_1,Motor_CW);
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 96 00 	call	0x12c	; 0x12c <DCMotor_Rotate>
		DcMotor_Brake(Motor_1);
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 c7 00 	call	0x18e	; 0x18e <DcMotor_Brake>
  d0:	e4 cf       	rjmp	.-56     	; 0x9a <main+0x1e>
		
	}
	
	else if (data==3)
  d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	49 f4       	brne	.+18     	; 0xec <main+0x70>
	{
		DCMotor_Rotate(Motor_0,Motor_CW);
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 96 00 	call	0x12c	; 0x12c <DCMotor_Rotate>
		DCMotor_Rotate(Motor_1,Motor_CW);
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 96 00 	call	0x12c	; 0x12c <DCMotor_Rotate>
  ea:	d7 cf       	rjmp	.-82     	; 0x9a <main+0x1e>
		
	}
	
	else if (data==4)
  ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f0:	84 30       	cpi	r24, 0x04	; 4
  f2:	99 f6       	brne	.-90     	; 0x9a <main+0x1e>
	{
		DCMotor_Rotate(Motor_0,Motor_CCW);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 96 00 	call	0x12c	; 0x12c <DCMotor_Rotate>
		DCMotor_Rotate(Motor_1,Motor_CCW);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 96 00 	call	0x12c	; 0x12c <DCMotor_Rotate>
 104:	ca cf       	rjmp	.-108    	; 0x9a <main+0x1e>

00000106 <DcMotor_Initialization>:
 */ 
#include "motor.h"
#include "motor_configuration.h"
void DcMotor_Initialization(void)
{
	Set_Bit(DDRB , Motor_EN1);
 106:	87 b3       	in	r24, 0x17	; 23
 108:	88 60       	ori	r24, 0x08	; 8
 10a:	87 bb       	out	0x17, r24	; 23
	Set_Bit(DDRB , Motor_EN2);
 10c:	87 b3       	in	r24, 0x17	; 23
 10e:	80 61       	ori	r24, 0x10	; 16
 110:	87 bb       	out	0x17, r24	; 23
	
	
	
	Set_Bit(Motor_DATA_PRT,Motor_A1);
 112:	85 b3       	in	r24, 0x15	; 21
 114:	88 60       	ori	r24, 0x08	; 8
 116:	85 bb       	out	0x15, r24	; 21
	Set_Bit(Motor_DATA_PRT,Motor_A2);
 118:	85 b3       	in	r24, 0x15	; 21
 11a:	80 61       	ori	r24, 0x10	; 16
 11c:	85 bb       	out	0x15, r24	; 21
	Set_Bit(Motor_DATA_PRT,Motor_B1);
 11e:	85 b3       	in	r24, 0x15	; 21
 120:	80 62       	ori	r24, 0x20	; 32
 122:	85 bb       	out	0x15, r24	; 21
	Set_Bit(Motor_DATA_PRT,Motor_B2);
 124:	85 b3       	in	r24, 0x15	; 21
 126:	80 64       	ori	r24, 0x40	; 64
 128:	85 bb       	out	0x15, r24	; 21
 12a:	08 95       	ret

0000012c <DCMotor_Rotate>:
	
}

void DCMotor_Rotate(Motor motor, Motor_Direction direction)
{
	switch(motor)
 12c:	88 23       	and	r24, r24
 12e:	19 f0       	breq	.+6      	; 0x136 <DCMotor_Rotate+0xa>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	b9 f0       	breq	.+46     	; 0x162 <DCMotor_Rotate+0x36>
 134:	08 95       	ret
	{
		case Motor_0:
		Set_Bit(PORTB, Motor_EN1);
 136:	88 b3       	in	r24, 0x18	; 24
 138:	88 60       	ori	r24, 0x08	; 8
 13a:	88 bb       	out	0x18, r24	; 24
		switch(direction)
 13c:	66 23       	and	r22, r22
 13e:	19 f0       	breq	.+6      	; 0x146 <DCMotor_Rotate+0x1a>
 140:	61 30       	cpi	r22, 0x01	; 1
 142:	41 f0       	breq	.+16     	; 0x154 <DCMotor_Rotate+0x28>
 144:	08 95       	ret
		{
			case Motor_CW:
			Set_Bit(PORTC, Motor_A1);
 146:	85 b3       	in	r24, 0x15	; 21
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	85 bb       	out	0x15, r24	; 21
			Clr_Bit(PORTC, Motor_A2);
 14c:	85 b3       	in	r24, 0x15	; 21
 14e:	8f 7e       	andi	r24, 0xEF	; 239
 150:	85 bb       	out	0x15, r24	; 21
			break;
 152:	08 95       	ret
			case Motor_CCW:
			Clr_Bit(PORTC, Motor_A1);
 154:	85 b3       	in	r24, 0x15	; 21
 156:	87 7f       	andi	r24, 0xF7	; 247
 158:	85 bb       	out	0x15, r24	; 21
			Set_Bit(PORTC, Motor_A2);
 15a:	85 b3       	in	r24, 0x15	; 21
 15c:	80 61       	ori	r24, 0x10	; 16
 15e:	85 bb       	out	0x15, r24	; 21
			break;
 160:	08 95       	ret
		}
		break;
		case Motor_1:
		Set_Bit(PORTB, Motor_EN2);
 162:	88 b3       	in	r24, 0x18	; 24
 164:	80 61       	ori	r24, 0x10	; 16
 166:	88 bb       	out	0x18, r24	; 24
		switch(direction)
 168:	66 23       	and	r22, r22
 16a:	19 f0       	breq	.+6      	; 0x172 <DCMotor_Rotate+0x46>
 16c:	61 30       	cpi	r22, 0x01	; 1
 16e:	41 f0       	breq	.+16     	; 0x180 <DCMotor_Rotate+0x54>
 170:	08 95       	ret
		{
			case Motor_CW:
			Set_Bit(PORTC, Motor_B1);
 172:	85 b3       	in	r24, 0x15	; 21
 174:	80 62       	ori	r24, 0x20	; 32
 176:	85 bb       	out	0x15, r24	; 21
			Clr_Bit(PORTC, Motor_B2);
 178:	85 b3       	in	r24, 0x15	; 21
 17a:	8f 7b       	andi	r24, 0xBF	; 191
 17c:	85 bb       	out	0x15, r24	; 21
			break;
 17e:	08 95       	ret
			case Motor_CCW:
			Clr_Bit(PORTC, Motor_B1);
 180:	85 b3       	in	r24, 0x15	; 21
 182:	8f 7d       	andi	r24, 0xDF	; 223
 184:	85 bb       	out	0x15, r24	; 21
			Set_Bit(PORTC, Motor_B2);
 186:	85 b3       	in	r24, 0x15	; 21
 188:	80 64       	ori	r24, 0x40	; 64
 18a:	85 bb       	out	0x15, r24	; 21
 18c:	08 95       	ret

0000018e <DcMotor_Brake>:
	}
}

void DcMotor_Brake(Motor motor)
{
	switch(motor)
 18e:	88 23       	and	r24, r24
 190:	19 f0       	breq	.+6      	; 0x198 <DcMotor_Brake+0xa>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	41 f0       	breq	.+16     	; 0x1a6 <DcMotor_Brake+0x18>
 196:	08 95       	ret
	{
		case Motor_0:
		Clr_Bit(PORTC, Motor_A1);
 198:	85 b3       	in	r24, 0x15	; 21
 19a:	87 7f       	andi	r24, 0xF7	; 247
 19c:	85 bb       	out	0x15, r24	; 21
		Clr_Bit(PORTC, Motor_A2);
 19e:	85 b3       	in	r24, 0x15	; 21
 1a0:	8f 7e       	andi	r24, 0xEF	; 239
 1a2:	85 bb       	out	0x15, r24	; 21
		break;
 1a4:	08 95       	ret
		case Motor_1:
		Clr_Bit(PORTC, Motor_B1);
 1a6:	85 b3       	in	r24, 0x15	; 21
 1a8:	8f 7d       	andi	r24, 0xDF	; 223
 1aa:	85 bb       	out	0x15, r24	; 21
		Clr_Bit(PORTC, Motor_B2);
 1ac:	85 b3       	in	r24, 0x15	; 21
 1ae:	8f 7b       	andi	r24, 0xBF	; 191
 1b0:	85 bb       	out	0x15, r24	; 21
 1b2:	08 95       	ret

000001b4 <Uart_Initilization>:
 *  Author: abdala abdelatif
 */ 

#include "Uart.h"
void Uart_Initilization (uint16_t Baud_Rate){
	DDRD &=~(1<<0);
 1b4:	21 b3       	in	r18, 0x11	; 17
 1b6:	2e 7f       	andi	r18, 0xFE	; 254
 1b8:	21 bb       	out	0x11, r18	; 17
	DDRD |= (1<<1);
 1ba:	21 b3       	in	r18, 0x11	; 17
 1bc:	22 60       	ori	r18, 0x02	; 2
 1be:	21 bb       	out	0x11, r18	; 17
	UCSRB |= (1<<RXEN) | (1<<TXEN);//Enable receive, transmit //USCRB = 0x18;
 1c0:	2a b1       	in	r18, 0x0a	; 10
 1c2:	28 61       	ori	r18, 0x18	; 24
 1c4:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1<<URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 1c6:	20 b5       	in	r18, 0x20	; 32
 1c8:	26 68       	ori	r18, 0x86	; 134
 1ca:	20 bd       	out	0x20, r18	; 32
	uint16_t UBRR_Value = ((1000000/Baud_Rate)-1);
 1cc:	9c 01       	movw	r18, r24
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	60 e4       	ldi	r22, 0x40	; 64
 1d4:	72 e4       	ldi	r23, 0x42	; 66
 1d6:	8f e0       	ldi	r24, 0x0F	; 15
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <__divmodsi4>
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	31 09       	sbc	r19, r1
	UBRRL = (uint8_t) UBRR_Value;
 1e2:	29 b9       	out	0x09, r18	; 9
	UBRRH = (uint8_t) (UBRR_Value >> 8);
 1e4:	30 bd       	out	0x20, r19	; 32
 1e6:	08 95       	ret

000001e8 <Uart_Recieve>:
	
}

uint8_t Uart_Recieve (void) {
	
	while (! (UCSRA & (1 << RXC)));
 1e8:	5f 9b       	sbis	0x0b, 7	; 11
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <Uart_Recieve>
	return(UDR);
 1ec:	8c b1       	in	r24, 0x0c	; 12
	
}
 1ee:	08 95       	ret

000001f0 <__divmodsi4>:
 1f0:	05 2e       	mov	r0, r21
 1f2:	97 fb       	bst	r25, 7
 1f4:	1e f4       	brtc	.+6      	; 0x1fc <__divmodsi4+0xc>
 1f6:	00 94       	com	r0
 1f8:	0e 94 0f 01 	call	0x21e	; 0x21e <__negsi2>
 1fc:	57 fd       	sbrc	r21, 7
 1fe:	07 d0       	rcall	.+14     	; 0x20e <__divmodsi4_neg2>
 200:	0e 94 17 01 	call	0x22e	; 0x22e <__udivmodsi4>
 204:	07 fc       	sbrc	r0, 7
 206:	03 d0       	rcall	.+6      	; 0x20e <__divmodsi4_neg2>
 208:	4e f4       	brtc	.+18     	; 0x21c <__divmodsi4_exit>
 20a:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__negsi2>

0000020e <__divmodsi4_neg2>:
 20e:	50 95       	com	r21
 210:	40 95       	com	r20
 212:	30 95       	com	r19
 214:	21 95       	neg	r18
 216:	3f 4f       	sbci	r19, 0xFF	; 255
 218:	4f 4f       	sbci	r20, 0xFF	; 255
 21a:	5f 4f       	sbci	r21, 0xFF	; 255

0000021c <__divmodsi4_exit>:
 21c:	08 95       	ret

0000021e <__negsi2>:
 21e:	90 95       	com	r25
 220:	80 95       	com	r24
 222:	70 95       	com	r23
 224:	61 95       	neg	r22
 226:	7f 4f       	sbci	r23, 0xFF	; 255
 228:	8f 4f       	sbci	r24, 0xFF	; 255
 22a:	9f 4f       	sbci	r25, 0xFF	; 255
 22c:	08 95       	ret

0000022e <__udivmodsi4>:
 22e:	a1 e2       	ldi	r26, 0x21	; 33
 230:	1a 2e       	mov	r1, r26
 232:	aa 1b       	sub	r26, r26
 234:	bb 1b       	sub	r27, r27
 236:	fd 01       	movw	r30, r26
 238:	0d c0       	rjmp	.+26     	; 0x254 <__udivmodsi4_ep>

0000023a <__udivmodsi4_loop>:
 23a:	aa 1f       	adc	r26, r26
 23c:	bb 1f       	adc	r27, r27
 23e:	ee 1f       	adc	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	a2 17       	cp	r26, r18
 244:	b3 07       	cpc	r27, r19
 246:	e4 07       	cpc	r30, r20
 248:	f5 07       	cpc	r31, r21
 24a:	20 f0       	brcs	.+8      	; 0x254 <__udivmodsi4_ep>
 24c:	a2 1b       	sub	r26, r18
 24e:	b3 0b       	sbc	r27, r19
 250:	e4 0b       	sbc	r30, r20
 252:	f5 0b       	sbc	r31, r21

00000254 <__udivmodsi4_ep>:
 254:	66 1f       	adc	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	88 1f       	adc	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	1a 94       	dec	r1
 25e:	69 f7       	brne	.-38     	; 0x23a <__udivmodsi4_loop>
 260:	60 95       	com	r22
 262:	70 95       	com	r23
 264:	80 95       	com	r24
 266:	90 95       	com	r25
 268:	9b 01       	movw	r18, r22
 26a:	ac 01       	movw	r20, r24
 26c:	bd 01       	movw	r22, r26
 26e:	cf 01       	movw	r24, r30
 270:	08 95       	ret

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
